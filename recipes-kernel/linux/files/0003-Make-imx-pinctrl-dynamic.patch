diff --git a/drivers/pinctrl/freescale/pinctrl-imx.c b/drivers/pinctrl/freescale/pinctrl-imx.c
index 9613856..4b65997 100644
--- a/drivers/pinctrl/freescale/pinctrl-imx.c
+++ b/drivers/pinctrl/freescale/pinctrl-imx.c
@@ -28,9 +28,20 @@
 #include "../core.h"
 #include "pinctrl-imx.h"
 
+/*******************************************************************************
+ * Definitions
+ */
+
+#define FSL_MUX_PINS_NAMES		"fsl,pins"
 /* The bits in CONFIG cell defined in binding doc*/
-#define IMX_NO_PAD_CTL	0x80000000	/* no pin config need */
-#define IMX_PAD_SION 0x40000000		/* set SION */
+#define IMX_NO_PAD_CTL			0x80000000	/* no pin config need */
+#define IMX_PAD_SION			0x40000000	/* set SION */
+/*
+ * Each pin represented in fsl,pins consists of 5 u32 PIN_FUNC_ID and
+ * 1 u32 CONFIG, so 24 types in total for each pin.
+ */
+#define FSL_PIN_SIZE			24
+#define SHARE_FSL_PIN_SIZE		20
 
 /**
  * @dev: a pointer back to containing device
@@ -44,23 +55,73 @@ struct imx_pinctrl {
 	const struct imx_pinctrl_soc_info *info;
 };
 
-static const inline struct imx_pin_group *imx_pinctrl_find_group_by_name(
+/*******************************************************************************
+ * Helpers
+ */
+
+static inline struct imx_pin_group *imx_pinctrl_find_group_by_name(
 				const struct imx_pinctrl_soc_info *info,
 				const char *name)
 {
-	const struct imx_pin_group *grp = NULL;
-	int i;
+	struct imx_pin_group *grp;
 
-	for (i = 0; i < info->ngroups; i++) {
-		if (!strcmp(info->groups[i].name, name)) {
-			grp = &info->groups[i];
-			break;
+	list_for_each_entry(grp, &info->groups_list, list) {
+		if (!strcmp(grp->name, name)) {
+			return grp;
+		}
+	}
+	return NULL;
+}
+
+static inline struct imx_pin_group *imx_pinctrl_find_group_by_index(
+				const struct imx_pinctrl_soc_info *info,
+				unsigned index)
+{
+	struct imx_pin_group *grp;
+	unsigned i = 0;
+
+	list_for_each_entry(grp, &info->groups_list, list) {
+		if (i == index)
+			return grp;
+		i++;
+	}
+	return NULL;
+}
+
+static inline struct imx_pmx_func *imx_pinctrl_find_function_by_name(
+				const struct imx_pinctrl_soc_info *info,
+				const char *name)
+{
+	struct imx_pmx_func *func;
+
+	list_for_each_entry(func, &info->functions_list, list) {
+		if (!strcmp(func->name, name)) {
+			return func;
 		}
 	}
+	return NULL;
+}
+
+static inline struct imx_pmx_func *imx_pinctrl_find_function_by_index(
+				const struct imx_pinctrl_soc_info *info,
+				unsigned index)
+{
+	struct imx_pmx_func *func;
+	unsigned i = 0;
 
-	return grp;
+	list_for_each_entry(func, &info->functions_list, list) {
+		if (i == index) {
+			return func;
+		}
+		i++;
+	}
+	return NULL;
 }
 
+/*******************************************************************************
+ * pinctrl_ops
+ */
+
 static int imx_get_groups_count(struct pinctrl_dev *pctldev)
 {
 	struct imx_pinctrl *ipctl = pinctrl_dev_get_drvdata(pctldev);
@@ -74,8 +135,15 @@ static const char *imx_get_group_name(struct pinctrl_dev *pctldev,
 {
 	struct imx_pinctrl *ipctl = pinctrl_dev_get_drvdata(pctldev);
 	const struct imx_pinctrl_soc_info *info = ipctl->info;
+	const struct imx_pin_group *grp;
+	unsigned i = 0;
 
-	return info->groups[selector].name;
+	list_for_each_entry(grp, &info->groups_list, list) {
+		if (i == selector)
+			return grp->name;
+		i++;
+	}
+	return NULL;
 }
 
 static int imx_get_group_pins(struct pinctrl_dev *pctldev, unsigned selector,
@@ -84,12 +152,20 @@ static int imx_get_group_pins(struct pinctrl_dev *pctldev, unsigned selector,
 {
 	struct imx_pinctrl *ipctl = pinctrl_dev_get_drvdata(pctldev);
 	const struct imx_pinctrl_soc_info *info = ipctl->info;
+	const struct imx_pin_group *grp;
+	unsigned i = 0;
 
 	if (selector >= info->ngroups)
 		return -EINVAL;
 
-	*pins = info->groups[selector].pin_ids;
-	*npins = info->groups[selector].npins;
+	list_for_each_entry(grp, &info->groups_list, list) {
+		if (i == selector) {
+			*pins = grp->pin_ids;
+			*npins = grp->npins;
+			break;
+		}
+		i++;
+	}
 
 	return 0;
 }
@@ -100,7 +176,100 @@ static void imx_pin_dbg_show(struct pinctrl_dev *pctldev, struct seq_file *s,
 	seq_printf(s, "%s", dev_name(pctldev->dev));
 }
 
-static int imx_dt_node_to_map(struct pinctrl_dev *pctldev,
+static int imx_parse_one_pinctrl_entry(struct device_node *np,
+		struct imx_pinctrl_soc_info *info) {
+	struct device *dev = info->dev;
+	int size, pin_size;
+	const __be32 *list;
+	int i;
+	u32 config;
+	struct imx_pin_group *grp;
+
+	if (info->flags & SHARE_MUX_CONF_REG)
+		pin_size = SHARE_FSL_PIN_SIZE;
+	else
+		pin_size = FSL_PIN_SIZE;
+	list = of_get_property(np, FSL_MUX_PINS_NAMES, &size);
+	if (!list) {
+		dev_err(info->dev,
+			"no " FSL_MUX_PINS_NAMES " property in node %s\n",
+			np->full_name);
+		return -EINVAL;
+	}
+	if (!size || size % pin_size) {
+		dev_err(info->dev,
+			"Invalid " FSL_MUX_PINS_NAMES " property in node %s\n",
+			np->full_name);
+		return -EINVAL;
+	}
+
+	grp = imx_pinctrl_find_group_by_name(info, np->name);
+	if (grp != NULL) {
+		list_del(&grp->list);
+		devm_kfree(dev, grp->pins);
+		devm_kfree(dev, grp->pin_ids);
+		devm_kfree(dev, grp);
+	}
+	grp = devm_kzalloc(dev, sizeof(struct imx_pin_group), GFP_KERNEL);
+	if (!grp)
+		return -ENOMEM;
+
+	grp->name = np->name;
+	grp->npins = size / pin_size;
+	grp->pins = devm_kzalloc(info->dev,
+				grp->npins * sizeof(struct imx_pin),
+				GFP_KERNEL);
+	grp->pin_ids = devm_kzalloc(info->dev,
+				grp->npins * sizeof(unsigned int),
+				GFP_KERNEL);
+	if (!grp->pins || ! grp->pin_ids)
+		return -ENOMEM;
+
+	for (i = 0; i < grp->npins; i++) {
+		u32 mux_reg = be32_to_cpu(*list++);
+		u32 conf_reg;
+		unsigned int pin_id;
+		struct imx_pin_reg *pin_reg;
+		struct imx_pin *pin = &grp->pins[i];
+
+		if (!(info->flags & ZERO_OFFSET_VALID) && !mux_reg)
+			mux_reg = -1;
+
+		if (info->flags & SHARE_MUX_CONF_REG) {
+			conf_reg = mux_reg;
+		} else {
+			conf_reg = be32_to_cpu(*list++);
+			if (!(info->flags & ZERO_OFFSET_VALID) && !conf_reg)
+				conf_reg = -1;
+		}
+
+		pin_id = (mux_reg != -1) ? mux_reg / 4 : conf_reg / 4;
+		pin_reg = &info->pin_regs[pin_id];
+		pin->pin = pin_id;
+		grp->pin_ids[i] = pin_id;
+		pin_reg->mux_reg = mux_reg;
+		pin_reg->conf_reg = conf_reg;
+		pin->input_reg = be32_to_cpu(*list++);
+		pin->mux_mode = be32_to_cpu(*list++);
+		pin->input_val = be32_to_cpu(*list++);
+
+		/* SION bit is in mux register */
+		config = be32_to_cpu(*list++);
+		if (config & IMX_PAD_SION)
+			pin->mux_mode |= IOMUXC_CONFIG_SION;
+		pin->config = config & ~IMX_PAD_SION;
+
+		dev_dbg(info->dev, "%s: 0x%x 0x%08lx", info->pins[pin_id].name,
+				pin->mux_mode, pin->config);
+	}
+	INIT_LIST_HEAD(&grp->list);
+	list_add_tail(&grp->list, &info->groups_list);
+	info->ngroups++;
+
+	return 0;
+}
+
+static int imx_dt_node_to_map_old(struct pinctrl_dev *pctldev,
 			struct device_node *np,
 			struct pinctrl_map **map, unsigned *num_maps)
 {
@@ -165,6 +334,67 @@ static int imx_dt_node_to_map(struct pinctrl_dev *pctldev,
 	return 0;
 }
 
+/**
+ * imx_dt_node_to_map() - allocates and parses pinctrl maps
+ * @pctldev: pinctrl instance
+ * @np_config: device tree pinmux entry
+ * @map: array of map entries
+ * @num_maps: number of maps
+ */
+static int imx_dt_node_to_map(struct pinctrl_dev *pctldev,
+			struct device_node *np,
+			struct pinctrl_map **map, unsigned *num_maps)
+{
+	struct imx_pinctrl *ipctl = pinctrl_dev_get_drvdata(pctldev);
+	struct imx_pinctrl_soc_info *info = ipctl->info;
+	struct device *dev = info->dev;
+	struct device_node *func_np;
+	struct imx_pmx_func *func;
+	int err, i = 0;
+	const char **new_groups;
+	bool func_found = true;
+
+	func_np = of_get_parent(np);
+	func = imx_pinctrl_find_function_by_name(info, func_np->name);
+	if (!func) {
+		func_found = false;
+		func = devm_kzalloc(dev, sizeof(struct imx_pmx_func),
+				GFP_KERNEL);
+		if (!func) {
+			of_node_put(func_np);
+			return -ENOMEM;
+		}
+	}
+	func->name = func_np->name;
+	of_node_put(func_np);
+
+	err = imx_parse_one_pinctrl_entry(np, info);
+	if (err)
+		return err;
+	func->num_groups++;
+	new_groups = devm_kzalloc(dev,
+			func->num_groups * sizeof(char *), GFP_KERNEL);
+	if (!new_groups) {
+		func->num_groups--;
+		return -ENOMEM;
+	}
+	if (func->groups) {
+		for (; i < func->num_groups - 1; i++)
+			new_groups[i] = func->groups[i];
+		devm_kfree(dev, func->groups);
+	}
+	new_groups[i] = np->name;
+	func->groups = new_groups;
+	if (!func_found) {
+		INIT_LIST_HEAD(&func->list);
+		list_add_tail(&func->list, &info->functions_list);
+		info->nfunctions++;
+	}
+
+	err = imx_dt_node_to_map_old(pctldev, np, map, num_maps);
+	return err;
+}
+
 static void imx_dt_free_map(struct pinctrl_dev *pctldev,
 				struct pinctrl_map *map, unsigned num_maps)
 {
@@ -181,6 +411,10 @@ static const struct pinctrl_ops imx_pctrl_ops = {
 
 };
 
+/*******************************************************************************
+ * pinmux_ops
+ */
+
 static int imx_pmx_set(struct pinctrl_dev *pctldev, unsigned selector,
 		       unsigned group)
 {
@@ -190,16 +424,19 @@ static int imx_pmx_set(struct pinctrl_dev *pctldev, unsigned selector,
 	unsigned int npins, pin_id;
 	int i;
 	struct imx_pin_group *grp;
+	struct imx_pmx_func *func;
 
 	/*
 	 * Configure the mux mode for each pin in the group for a specific
 	 * function.
 	 */
-	grp = &info->groups[group];
+
+	grp = imx_pinctrl_find_group_by_index(info, group);
+	func = imx_pinctrl_find_function_by_index(info, selector);
 	npins = grp->npins;
 
 	dev_dbg(ipctl->dev, "enable function %s group %s\n",
-		info->functions[selector].name, grp->name);
+		func->name, grp->name);
 
 	for (i = 0; i < npins; i++) {
 		struct imx_pin *pin = &grp->pins[i];
@@ -284,8 +521,13 @@ static const char *imx_pmx_get_func_name(struct pinctrl_dev *pctldev,
 {
 	struct imx_pinctrl *ipctl = pinctrl_dev_get_drvdata(pctldev);
 	const struct imx_pinctrl_soc_info *info = ipctl->info;
+	struct imx_pmx_func *func;
 
-	return info->functions[selector].name;
+	func = imx_pinctrl_find_function_by_index(info, selector);
+
+	if (func)
+		return func->name;
+	return NULL;
 }
 
 static int imx_pmx_get_groups(struct pinctrl_dev *pctldev, unsigned selector,
@@ -294,9 +536,15 @@ static int imx_pmx_get_groups(struct pinctrl_dev *pctldev, unsigned selector,
 {
 	struct imx_pinctrl *ipctl = pinctrl_dev_get_drvdata(pctldev);
 	const struct imx_pinctrl_soc_info *info = ipctl->info;
+	struct imx_pmx_func *func;
+
+	func = imx_pinctrl_find_function_by_index(info, selector);
+
+	if (!func)
+		return -EINVAL;
 
-	*groups = info->functions[selector].groups;
-	*num_groups = info->functions[selector].num_groups;
+	*groups = func->groups;
+	*num_groups = func->num_groups;
 
 	return 0;
 }
@@ -322,7 +570,7 @@ static int imx_pmx_gpio_request_enable(struct pinctrl_dev *pctldev,
 
 	/* Find the pinctrl config with GPIO mux mode for the requested pin */
 	for (group = 0; group < info->ngroups; group++) {
-		grp = &info->groups[group];
+		grp = imx_pinctrl_find_group_by_index(info, group);
 		for (pin = 0; pin < grp->npins; pin++) {
 			imx_pin = &grp->pins[pin];
 			if (imx_pin->pin == offset && !imx_pin->mux_mode)
@@ -380,6 +628,10 @@ static const struct pinmux_ops imx_pmx_ops = {
 	.gpio_set_direction = imx_pmx_gpio_set_direction,
 };
 
+/*******************************************************************************
+ * pinconf_ops
+ */
+
 static int imx_pinconf_get(struct pinctrl_dev *pctldev,
 			     unsigned pin_id, unsigned long *config)
 {
@@ -467,7 +719,7 @@ static void imx_pinconf_group_dbg_show(struct pinctrl_dev *pctldev,
 		return;
 
 	seq_printf(s, "\n");
-	grp = &info->groups[group];
+	grp = imx_pinctrl_find_group_by_index(info, group);
 	for (i = 0; i < grp->npins; i++) {
 		struct imx_pin *pin = &grp->pins[i];
 		name = pin_get_name(pctldev, pin->pin);
@@ -485,165 +737,9 @@ static const struct pinconf_ops imx_pinconf_ops = {
 	.pin_config_group_dbg_show = imx_pinconf_group_dbg_show,
 };
 
-/*
- * Each pin represented in fsl,pins consists of 5 u32 PIN_FUNC_ID and
- * 1 u32 CONFIG, so 24 types in total for each pin.
+/*******************************************************************************
+ * Probe
  */
-#define FSL_PIN_SIZE 24
-#define SHARE_FSL_PIN_SIZE 20
-
-static int imx_pinctrl_parse_groups(struct device_node *np,
-				    struct imx_pin_group *grp,
-				    struct imx_pinctrl_soc_info *info,
-				    u32 index)
-{
-	int size, pin_size;
-	const __be32 *list;
-	int i;
-	u32 config;
-
-	dev_dbg(info->dev, "group(%d): %s\n", index, np->name);
-
-	if (info->flags & SHARE_MUX_CONF_REG)
-		pin_size = SHARE_FSL_PIN_SIZE;
-	else
-		pin_size = FSL_PIN_SIZE;
-	/* Initialise group */
-	grp->name = np->name;
-
-	/*
-	 * the binding format is fsl,pins = <PIN_FUNC_ID CONFIG ...>,
-	 * do sanity check and calculate pins number
-	 */
-	list = of_get_property(np, "fsl,pins", &size);
-	if (!list) {
-		dev_err(info->dev, "no fsl,pins property in node %s\n", np->full_name);
-		return -EINVAL;
-	}
-
-	/* we do not check return since it's safe node passed down */
-	if (!size || size % pin_size) {
-		dev_err(info->dev, "Invalid fsl,pins property in node %s\n", np->full_name);
-		return -EINVAL;
-	}
-
-	grp->npins = size / pin_size;
-	grp->pins = devm_kzalloc(info->dev, grp->npins * sizeof(struct imx_pin),
-				GFP_KERNEL);
-	grp->pin_ids = devm_kzalloc(info->dev, grp->npins * sizeof(unsigned int),
-				GFP_KERNEL);
-	if (!grp->pins || ! grp->pin_ids)
-		return -ENOMEM;
-
-	for (i = 0; i < grp->npins; i++) {
-		u32 mux_reg = be32_to_cpu(*list++);
-		u32 conf_reg;
-		unsigned int pin_id;
-		struct imx_pin_reg *pin_reg;
-		struct imx_pin *pin = &grp->pins[i];
-
-		if (!(info->flags & ZERO_OFFSET_VALID) && !mux_reg)
-			mux_reg = -1;
-
-		if (info->flags & SHARE_MUX_CONF_REG) {
-			conf_reg = mux_reg;
-		} else {
-			conf_reg = be32_to_cpu(*list++);
-			if (!(info->flags & ZERO_OFFSET_VALID) && !conf_reg)
-				conf_reg = -1;
-		}
-
-		pin_id = (mux_reg != -1) ? mux_reg / 4 : conf_reg / 4;
-		pin_reg = &info->pin_regs[pin_id];
-		pin->pin = pin_id;
-		grp->pin_ids[i] = pin_id;
-		pin_reg->mux_reg = mux_reg;
-		pin_reg->conf_reg = conf_reg;
-		pin->input_reg = be32_to_cpu(*list++);
-		pin->mux_mode = be32_to_cpu(*list++);
-		pin->input_val = be32_to_cpu(*list++);
-
-		/* SION bit is in mux register */
-		config = be32_to_cpu(*list++);
-		if (config & IMX_PAD_SION)
-			pin->mux_mode |= IOMUXC_CONFIG_SION;
-		pin->config = config & ~IMX_PAD_SION;
-
-		dev_dbg(info->dev, "%s: 0x%x 0x%08lx", info->pins[pin_id].name,
-				pin->mux_mode, pin->config);
-	}
-
-	return 0;
-}
-
-static int imx_pinctrl_parse_functions(struct device_node *np,
-				       struct imx_pinctrl_soc_info *info,
-				       u32 index)
-{
-	struct device_node *child;
-	struct imx_pmx_func *func;
-	struct imx_pin_group *grp;
-	u32 i = 0;
-
-	dev_dbg(info->dev, "parse function(%d): %s\n", index, np->name);
-
-	func = &info->functions[index];
-
-	/* Initialise function */
-	func->name = np->name;
-	func->num_groups = of_get_child_count(np);
-	if (func->num_groups == 0) {
-		dev_err(info->dev, "no groups defined in %s\n", np->full_name);
-		return -EINVAL;
-	}
-	func->groups = devm_kzalloc(info->dev,
-			func->num_groups * sizeof(char *), GFP_KERNEL);
-
-	for_each_child_of_node(np, child) {
-		func->groups[i] = child->name;
-		grp = &info->groups[info->grp_index++];
-		imx_pinctrl_parse_groups(child, grp, info, i++);
-	}
-
-	return 0;
-}
-
-static int imx_pinctrl_probe_dt(struct platform_device *pdev,
-				struct imx_pinctrl_soc_info *info)
-{
-	struct device_node *np = pdev->dev.of_node;
-	struct device_node *child;
-	u32 nfuncs = 0;
-	u32 i = 0;
-
-	if (!np)
-		return -ENODEV;
-
-	nfuncs = of_get_child_count(np);
-	if (nfuncs <= 0) {
-		dev_err(&pdev->dev, "no functions defined\n");
-		return -EINVAL;
-	}
-
-	info->nfunctions = nfuncs;
-	info->functions = devm_kzalloc(&pdev->dev, nfuncs * sizeof(struct imx_pmx_func),
-					GFP_KERNEL);
-	if (!info->functions)
-		return -ENOMEM;
-
-	info->ngroups = 0;
-	for_each_child_of_node(np, child)
-		info->ngroups += of_get_child_count(child);
-	info->groups = devm_kzalloc(&pdev->dev, info->ngroups * sizeof(struct imx_pin_group),
-					GFP_KERNEL);
-	if (!info->groups)
-		return -ENOMEM;
-
-	for_each_child_of_node(np, child)
-		imx_pinctrl_parse_functions(child, info, i++);
-
-	return 0;
-}
 
 int imx_pinctrl_probe(struct platform_device *pdev,
 		      struct imx_pinctrl_soc_info *info)
@@ -653,13 +749,15 @@ int imx_pinctrl_probe(struct platform_device *pdev,
 	struct imx_pinctrl *ipctl;
 	struct resource *res;
 	struct pinctrl_desc *imx_pinctrl_desc;
-	int ret, i;
+	int i;
 
 	if (!info || !info->pins || !info->npins) {
 		dev_err(&pdev->dev, "wrong pinctrl info\n");
 		return -EINVAL;
 	}
 	info->dev = &pdev->dev;
+	INIT_LIST_HEAD(&info->functions_list);
+	INIT_LIST_HEAD(&info->groups_list);
 
 	imx_pinctrl_desc = devm_kzalloc(&pdev->dev, sizeof(*imx_pinctrl_desc),
 					GFP_KERNEL);
@@ -711,12 +809,6 @@ int imx_pinctrl_probe(struct platform_device *pdev,
 	imx_pinctrl_desc->confops = &imx_pinconf_ops;
 	imx_pinctrl_desc->owner = THIS_MODULE;
 
-	ret = imx_pinctrl_probe_dt(pdev, info);
-	if (ret) {
-		dev_err(&pdev->dev, "fail to probe dt properties\n");
-		return ret;
-	}
-
 	ipctl->info = info;
 	ipctl->dev = info->dev;
 	platform_set_drvdata(pdev, ipctl);
@@ -731,26 +823,34 @@ int imx_pinctrl_probe(struct platform_device *pdev,
 	return 0;
 }
 
+/*******************************************************************************
+ * Power management
+ */
+
 int imx_pinctrl_suspend(struct device *dev)
 {
-       struct imx_pinctrl *ipctl = dev_get_drvdata(dev);
+	struct imx_pinctrl *ipctl = dev_get_drvdata(dev);
 
-       if (!ipctl)
-               return -EINVAL;
+	if (!ipctl)
+	       return -EINVAL;
 
-       return pinctrl_force_sleep(ipctl->pctl);
+	return pinctrl_force_sleep(ipctl->pctl);
 }
 
 int imx_pinctrl_resume(struct device *dev)
 {
-       struct imx_pinctrl *ipctl = dev_get_drvdata(dev);
+	struct imx_pinctrl *ipctl = dev_get_drvdata(dev);
 
-       if (!ipctl)
-               return -EINVAL;
+	if (!ipctl)
+	       return -EINVAL;
 
-       return pinctrl_force_default(ipctl->pctl);
+	return pinctrl_force_default(ipctl->pctl);
 }
 
+/*******************************************************************************
+ * Remove
+ */
+
 int imx_pinctrl_remove(struct platform_device *pdev)
 {
 	struct imx_pinctrl *ipctl = platform_get_drvdata(pdev);
diff --git a/drivers/pinctrl/freescale/pinctrl-imx.h b/drivers/pinctrl/freescale/pinctrl-imx.h
index dc8ac32..50027dc 100644
--- a/drivers/pinctrl/freescale/pinctrl-imx.h
+++ b/drivers/pinctrl/freescale/pinctrl-imx.h
@@ -15,6 +15,8 @@
 #ifndef __DRIVERS_PINCTRL_IMX_H
 #define __DRIVERS_PINCTRL_IMX_H
 
+#include <linux/types.h>
+
 struct platform_device;
 
 /**
@@ -41,12 +43,14 @@ struct imx_pin {
  *	elements in .pins so we can iterate over that array
  * @pin_ids: array of pin_ids. pinctrl forces us to maintain such an array
  * @pins: array of pins
+ * @list: used to navigate the list of groups
  */
 struct imx_pin_group {
 	const char *name;
 	unsigned npins;
 	unsigned int *pin_ids;
 	struct imx_pin *pins;
+	struct list_head list;
 };
 
 /**
@@ -54,11 +58,13 @@ struct imx_pin_group {
  * @name: the name of this specific function
  * @groups: corresponding pin groups
  * @num_groups: the number of groups
+ * @list: used to navigate the list of functions
  */
 struct imx_pmx_func {
 	const char *name;
 	const char **groups;
 	unsigned num_groups;
+	struct list_head list;
 };
 
 /**
@@ -76,9 +82,11 @@ struct imx_pinctrl_soc_info {
 	const struct pinctrl_pin_desc *pins;
 	unsigned int npins;
 	struct imx_pin_reg *pin_regs;
-	struct imx_pin_group *groups;
+	/* struct imx_pin_group *groups; */
+	struct list_head groups_list;
 	unsigned int ngroups;
-	struct imx_pmx_func *functions;
+	/* struct imx_pmx_func *functions; */
+	struct list_head functions_list;
 	unsigned int nfunctions;
 	unsigned int flags;
 	u32 grp_index;
